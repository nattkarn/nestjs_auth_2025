import {
  Inject,
  BadRequestException,
  Injectable,
  InternalServerErrorException,
  NotFoundException,
} from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
import { PrismaService } from 'src/prisma/prisma.service';
import { EmailService } from 'src/util/email.util';
import * as bcrypt from 'bcrypt';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';

import { v4 as uuidv4 } from 'uuid';
import { addMinutes } from 'date-fns';
import { AccountStatus, Role } from '@prisma/client';
import { ResendVerificationDto } from './dto/resend-email.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { UpdateRoleUserDto } from './dto/update-role-user.dto';
import { Redis } from 'ioredis';

const hashedPassword = async (password: string) => {
  return await bcrypt.hash(password, 10);
};

@Injectable()
export class UsersService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly emailService: EmailService,
    @Inject('REDIS_CLIENT') private readonly redis: Redis,
  ) {}

  //For auth only
  async findByUsernameHavePassword(data: { username: string }) {
    try {
      const user = await this.prisma.user.findUnique({
        where: {
          username: data.username,
          status: AccountStatus.ACTIVE,
          activated: true,
        },
        select: {
          id: true,
          username: true,
          email: true,
          role: true,
          status: true,
          password: true,
        },
      });

      if (!user) {
        throw new NotFoundException('User not found');
      }

      return {
        message: 'User found successfully',
        httpStatus: 200,
        data: {
          id: user.id,
          username: user.username,
          email: user.email,
          status: user.status,
          password: user.password,
          role: user.role.name,
        },
      };
    } catch (error) {
      throw new NotFoundException('User not found or User not active');
    }
  }

  async createUser(dto: CreateUserDto) {
    try {
      const userRole = await this.prisma.role.findUnique({
        where: { name: 'USER' },
      });
      if (!userRole) {
        throw new Error('User role not found');
      }

      // üëâ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡∏Å‡πà‡∏≠‡∏ô
      const user = await this.prisma.user.create({
        data: {
          username: dto.username,
          email: dto.email,
          password: await hashedPassword(dto.password),
          roleId: userRole.id, // ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
          status: AccountStatus.INACTIVE, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
          activated: false,
        },
        select: {
          id: true,
          username: true,
          email: true,
          roleId: true,
          status: true,
        },
      });

      // üëâ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ
      const token = uuidv4();
      const expiresAt = addMinutes(new Date(), 15);

      await this.prisma.verificationToken.create({
        data: {
          token,
          userId: user.id,
          expiresAt,
        },
      });

      // üëâ 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (URL ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å .env)
      const baseUrl = process.env.APP_BASE_URL || 'http://localhost:5000';
      const verificationLink = `${baseUrl}/verify-email?token=${token}`;

      // üëâ 4. ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const subject = `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ${process.env.APP_NAME}`;
      const message = `
  ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${user.username},
  
  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ:
  
  ${verificationLink}
  
  ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏â‡∏ö‡∏±‡∏ö‡∏ô‡∏µ‡πâ
  
  ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì,
  ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô ${process.env.APP_NAME}
      `.trim();

      await this.emailService.sendVerificationEmail(user.email, token);

      return {
        message: 'User created. Verification email sent.',
        httpStatus: 201,
        data: user,
      };
    } catch (error) {
      if (
        error instanceof PrismaClientKnownRequestError &&
        error.code === 'P2002'
      ) {
        const field = error.meta?.target?.[0] ?? 'Field';
        throw new BadRequestException(`${field} already exists`);
      }

      console.error('‚ùå Unexpected error during user creation:', error);
      throw new InternalServerErrorException('User creation failed');
    }
  }

  async resendVerification(dto: ResendVerificationDto) {
    const user = await this.prisma.user.findUnique({
      where: { email: dto.email },
    });

    // üîí ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡∏´‡∏£‡∏∑‡∏≠ activated ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    if (!user) {
      // NOTE: ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ß‡πà‡∏≤ email ‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      throw new BadRequestException('Cannot resend verification');
    }

    if (user.activated) {
      throw new BadRequestException('User already activated');
    }

    // üîÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÉ‡∏´‡∏°‡πà
    const token = uuidv4();
    const expiresAt = addMinutes(new Date(), 15);

    // üëá ‡πÉ‡∏ä‡πâ upsert ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ token
    await this.prisma.verificationToken.upsert({
      where: { userId: user.id },
      update: { token, expiresAt },
      create: {
        userId: user.id,
        token,
        expiresAt,
      },
    });

    // ‚úâÔ∏è ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    const baseUrl = process.env.APP_BASE_URL || 'http://localhost:5000';
    const verificationLink = `${baseUrl}/verify-email?token=${token}`;

    await this.emailService.sendVerificationEmail(user.email, token);

    return {
      message: 'Verification email sent (if user exists and is not activated)',
    };
  }

  async verifyEmail(token: string) {
    const verification = await this.prisma.verificationToken.findUnique({
      where: { token },
      include: { user: true },
    });

    if (!verification) {
      throw new NotFoundException('Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    }

    if (verification.expiresAt < new Date()) {
      throw new BadRequestException('Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    await this.prisma.user.update({
      where: { id: verification.userId },
      data: {
        activated: true,
        status: 'ACTIVE',
      },
    });

    // ‡∏•‡∏ö token ‡∏ó‡∏¥‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    await this.prisma.verificationToken.delete({
      where: { token },
    });

    return {
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ',
      httpStatus: 200,
    };
  }

  async findAll() {
    return this.prisma.user.findMany({
      select: {
        id: true,
        username: true,
        email: true,
        status: true,
        role: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  async findByUsername(data: { username: string }) {
    const cacheKey = `user:info:${data.username}`;

    try {
      // üîç 1. ‡∏ï‡∏£‡∏ß‡∏à Redis ‡∏Å‡πà‡∏≠‡∏ô
      const cached = await this.redis.get(cacheKey);
      if (cached) {
        return {
          message: 'User found (from cache)',
          httpStatus: 200,
          data: JSON.parse(cached),
        };
      }

      const user = await this.prisma.user.findUnique({
        where: {
          username: data.username,
        },
        select: {
          id: true,
          username: true,
          email: true,
          status: true,
          role: true,
          activated: true,
          createdAt: true,
          updatedAt: true,
        },
      });

      if (!user) {
        throw new NotFoundException('User not found');
      }

      // üíæ 3. ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á Redis TTL 300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      await this.redis.set(cacheKey, JSON.stringify(user), 'EX', 300);

      return {
        message: 'User found successfully',
        httpStatus: 200,
        data: user,
      };
    } catch (error) {
      throw new NotFoundException('User not found');
    }
  }

  async updateUser(id: string, data: UpdateUserDto) {
    try {
      this.redis.del('user:info:{username}')
      const user = await this.prisma.user.update({
        where: { id },
        data: {
          email: data.email,
          password: data.password,
        },
        select: {
          id: true,
          username: true,
          email: true,
          status: true,
          role: true,
          createdAt: true,
          updatedAt: true,
        },
      });
      return {
        message: 'User updated successfully',
        httpStatus: 200,
        data: user,
      };
    } catch (error) {
      throw new NotFoundException('User not found');
    }
  }

  async updateRole(id: string, data: UpdateRoleUserDto) {
    try {
      this.redis.del('user:info:{username}')
      const roleId = await this.prisma.role.findUnique({
        where: { name: data.role },
      });

      if (!roleId) {
        throw new NotFoundException('Role not found');
      }

      const user = await this.prisma.user.update({
        where: { id },
        data: {
          roleId: roleId.id,
        },
        select: {
          id: true,
          username: true,
          email: true,
          status: true,
          role: true,
          createdAt: true,
          updatedAt: true,
        },
      });
      return {
        message: 'User updated successfully',
        httpStatus: 200,
        data: user,
      };
    } catch (error) {
      throw new NotFoundException('User not found');
    }
  }

  async deleteUser(id: string) {
    try {
      this.redis.del('user:info:{username}')
      const user = await this.prisma.user.update({
        where: { id },
        data: {
          status: AccountStatus.BANNED,
        },
      });
      return {
        message: 'User deleted successfully',
        httpStatus: 200,
      };
    } catch (error) {
      throw new NotFoundException('User not found');
    }
  }

  async reviveUser(id: string) {
    try {
      this.redis.del('user:info:{username}')
      const user = await this.prisma.user.update({
        where: { id },
        data: {
          status: AccountStatus.ACTIVE,
        },
      });
      return {
        message: 'User revived successfully',
        httpStatus: 200,
      };
    } catch (error) {
      throw new NotFoundException('User not found');
    }
  }
}
