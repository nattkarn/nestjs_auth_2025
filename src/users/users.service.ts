import { BadRequestException, Injectable, InternalServerErrorException } from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
import { PrismaService } from 'src/prisma/prisma.service';
import { EmailService } from 'src/util/email.util';
import * as bcrypt from 'bcrypt';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';

import { v4 as uuidv4 } from 'uuid';
import { addMinutes } from 'date-fns';
import { AccountStatus } from '@prisma/client';

const hashedPassword = async (password: string) => {
  return await bcrypt.hash(password, 10);
};

@Injectable()
export class UsersService {

  constructor(
    private readonly prisma: PrismaService,
    private readonly emailService: EmailService
  ){}


  async createUser(dto: CreateUserDto) {
    try {

      const userRole = await this.prisma.role.findUnique({ where: { name: 'USER' } });
      if (!userRole) {
        throw new Error('User role not found');
      }



      // üëâ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡∏Å‡πà‡∏≠‡∏ô
      const user = await this.prisma.user.create({
        data: {
          username: dto.username,
          email: dto.email,
          password: await hashedPassword(dto.password),
          roleId: userRole.id,               // ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
          status: AccountStatus.INACTIVE, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
          activated: false,
        },
        select: {
          id: true,
          username: true,
          email: true,
          roleId: true,
          status: true,
        },
      });

      // üëâ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ
      const token = uuidv4();
      const expiresAt = addMinutes(new Date(), 15);

      await this.prisma.verificationToken.create({
        data: {
          token,
          userId: user.id,
          expiresAt,
        },
      });

      // üëâ 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (URL ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å .env)
      const baseUrl = process.env.APP_BASE_URL || 'http://localhost:5000';
      const verificationLink = `${baseUrl}/verify-email?token=${token}`;

      // üëâ 4. ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const subject = `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ${process.env.APP_NAME}`;
      const message = `
  ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${user.username},
  
  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ:
  
  ${verificationLink}
  
  ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏â‡∏ö‡∏±‡∏ö‡∏ô‡∏µ‡πâ
  
  ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì,
  ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô ${process.env.APP_NAME}
      `.trim();

      await this.emailService.sendVerificationEmail(user.email, token);

      return {
        message: 'User created. Verification email sent.',
        httpStatus: 201,
        data: user,
      };
    } catch (error) {
      if (
        error instanceof PrismaClientKnownRequestError &&
        error.code === 'P2002'
      ) {
        const field = error.meta?.target?.[0] ?? 'Field';
        throw new BadRequestException(`${field} already exists`);
      }

      console.error('‚ùå Unexpected error during user creation:', error);
      throw new InternalServerErrorException('User creation failed');
    }
  }
}
